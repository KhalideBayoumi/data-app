"use client";

import React, { useState } from 'react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import DualBarCharts from '@/app/(protected)/_components/charts/ui/dual-bar-chart';
import ChartWrapper from './ui/chart-wrapper';

interface DataPoint {
  name: string;
  companyMetric: number;
  industryMedian: number;
}

interface MetricsData {
  "Eco. Cash Flow": DataPoint[];
  "Eco. Revenues": DataPoint[];
  "Accounting EPS": DataPoint[];
}

const mockData: MetricsData = {
  "Eco. Cash Flow": [
    { name: "5y", companyMetric: 5, industryMedian: 2 },
    { name: "3y", companyMetric: 7, industryMedian: 3 },
    { name: "1y", companyMetric: -2, industryMedian: -5 },
    { name: "1y Fwd", companyMetric: 10, industryMedian: 6 },
    { name: "2y Fwd", companyMetric: 8, industryMedian: 4 },
  ],
  "Eco. Revenues": [
    { name: "5y", companyMetric: 3, industryMedian: 1 },
    { name: "3y", companyMetric: 6, industryMedian: 2 },
    { name: "1y", companyMetric: -1, industryMedian: -3 },
    { name: "1y Fwd", companyMetric: 8, industryMedian: 5 },
    { name: "2y Fwd", companyMetric: 7, industryMedian: 3 },
  ],
  "Accounting EPS": [
    { name: "5y", companyMetric: 4, industryMedian: 2 },
    { name: "3y", companyMetric: 5, industryMedian: 3 },
    { name: "1y", companyMetric: -3, industryMedian: -4 },
    { name: "1y Fwd", companyMetric: 9, industryMedian: 5 },
    { name: "2y Fwd", companyMetric: 6, industryMedian: 4 },
  ]
};

type MetricKey = keyof MetricsData;

const GrowthMetrics = () => {
  const [selectedMetric, setSelectedMetric] = useState<MetricKey>("Accounting EPS");

  const headerContent = (
    <Select value={selectedMetric} onValueChange={(value: MetricKey) => setSelectedMetric(value)}>
      <SelectTrigger className="w-[180px]">
        <SelectValue placeholder="Select metric" />
      </SelectTrigger>
      <SelectContent>
        {Object.keys(mockData).map((key) => (
          <SelectItem key={key} value={key}>{key}</SelectItem>
        ))}
      </SelectContent>
    </Select>
  );

  return (
    <ChartWrapper
      title="Growth Metrics"
      tooltipDescription={
        "Growth metrics are calculated on five temporalities, when available (last year, last 3 years, last 5 years, 1 year forwar, 2 year forward):\n\n" +
        "• \"Economic Revenues vs. Industry Median\" corresponds to the growth of operational revenues generated by the company, compared to the overall industry median it belongs to.\n\n" +
        "• \"Economic Enterprise Value vs. Industry Median\" corresponds to the growth of the company's Economic Enterprise Value, compared to the overall industry median it belongs to.\n\n" +
        "• \"Economic Assets vs. Book Value\" corresponds to the growth of the company's Economic Assets (see dedicated section below) compared to the widely available accounting Book Value.\n\n" +
        "• \"Economic Cash Flow/share vs. Earnings/share\" corresponds to the growth of the company's Economic Cash Flow (see dedicated section below) divided by its outstanding shares compared to the widely available accounting Net Income."
      }
      headerContent={headerContent}
    >
      <DualBarCharts
        data={mockData[selectedMetric]}
        bar1={{
          dataKey: "companyMetric",
          label: selectedMetric === "Accounting EPS" ? "EPS" : selectedMetric,
          color: "hsl(var(--chart-2))",
        }}
        bar2={{
          dataKey: "industryMedian",
          label: "Industry Median",
          color: "hsl(var(--chart-4))",
        }}
        yAxisDomain={[-8, 12]}
      />
    </ChartWrapper>
  );
};

export default GrowthMetrics;